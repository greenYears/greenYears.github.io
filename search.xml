<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[完美将工程从SVN迁移到Git仓库，并保留commit历史]]></title>
    <url>%2F2018%2F05%2F30%2F%E5%B7%A5%E5%85%B7%2F%E5%AE%8C%E7%BE%8E%E5%B0%86SVN%E8%BF%81%E7%A7%BB%E5%88%B0Git%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[本案例并不需要安装svn环境 导出SVN系统工程首先，我们需要一台Linux系统的机器(或者虚拟机)，并安装git-svn: 1yum install git-svn 进入将要进行保存代码仓库的目录(例如：/home/mygit),创建users.txt文件，其作用是为了将svn中的提交作者和mygit中的作者进行关联映射。该文件结构类似于 12ZhangSan = Zhang San &lt;san.zhang@mail.com&gt;LiSi = Li Si &lt;si.li@mail.com&gt; 注意：该文件可以先从使用svn命令从svn服务器将代码checkout下来，然后使用命令生成一个svn作者列表，进行修改，因本人项目参与人数不多，故使用手工编写。 安装完git-svn工具之后，使用git svn clone ...命令从svn服务器clone项目 1git svn clone --stdlayout --no-metadata -A users.txt http://svn.xxx.com/programer temp-dir 这个命令会在temp-dir中新建一个Git repo,并从svn中拉取代码，其中--stdlayout参数表示该项目在svn中是标准的trunk/branches/tags目录结构，如果不是，那么需要使用 --trunk, branches, --tags参数,除了trunk,其它的均是复数形式，如： 1git svn clone --no-metadata -A users.txt http://svn.xxx.com/programer --trunk=trunk temp-dir 如果项目中没有任何分支，连trunk也没有，则不需要任何参数，如 1git svn clone --no-metadata -A users.txt http://svn.xxx.com/programer temp-dir 如果出现用户名没有找到，更新users.txt文件之后，然后 12cd temp-dirgit svn fetch 完成后,git会将checkout svn的trunk 到本地master分支,其它的svn branch将会设为git remote， 可以查看所有的svn branch 1git branch -r 为其它svn branch创建本地分支 1git checkout -b local_branch_name remotes/branch_name 为其它svn tag创建tag 1git tag tag_name remotes/tags/tag_name 将上面的git-svn仓库 clone到一个干净的git本地库中 1234cd ..git clone temp-dir projectNamerm -rf temp-dir // 删除之前的git-svn库cd projectName // 进入干净的git本地库中 于是之前的git-svn库就成了现在的git本地库的remote branch了，可以使用git branch查看本地分支有哪些。在使用git checkout ...对每一个分支再建立一次本地分支 1git checkout -b local_branch origin/remote_branch tag貌似不需要再重新建立了，可以使用git tag查看本地是否有tag。 最后，将干净的git本地库中将之前的remote删除. 1git remote rm origin 将本地git库推送到远端将本地的git库推送到远程中央仓库 12git remote add origin http://$&#123;user&#125;@bitbucket.xxx.com/....git push -u origin master 推送所有的branch 1git push origin --all 推送所有的tag 1git push origin --tags]]></content>
      <categories>
        <category>Tools</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>svn</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SpringCloud介绍]]></title>
    <url>%2F2018%2F05%2F16%2FSpringCloud%E7%B3%BB%E5%88%97%2FSpringCloud%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[什么是微服务 微服务架构优势Spring Cloud可以做哪些事情Spring Cloud体系介绍首先看看Spring Cloud的组件架构图]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建github+hexo个人博客]]></title>
    <url>%2F2018%2F05%2F15%2F%E5%B7%A5%E5%85%B7%2F%E6%90%AD%E5%BB%BAgithub-hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[开始之前很久之前就一直想自己搭建一个个人博客系统，但是均因为种种原因而搁浅。这次算是一个全新的开始吧。开始记录生活，学习中的值得记录的点滴吧。 github+hexo的搭建流程网上有很多详细的图文教程，第一篇文章也不知道记录点什么，就拿这次的搭建过程来抛砖引玉了。此处只是粗略列举下步骤。 正式开始搭建github上的工作 登录github帐号，此处略过。 创建一个新的repository。点击如下图 初始化你的repository。建议Repository name填写内容类似:xxx.github.io;其中xxx是你在github上的名字。这样就可以直接使用https:xxx.github.io访问你的主页了。 本地开发环境搭建 开发电脑一台，windows,mac等，本人是在mac上开发的。 git。 node，npm。可以使用nvm来管理你本地的node环境版本，还是挺方便的。 开始搭建hexo 搭建开始可以参考官网; 本地debug: hexo s --debug 打包上传: hexo clean &amp;&amp; hexo g &amp;&amp; hexo d]]></content>
      <categories>
        <category>Tools</category>
        <category>blog</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
